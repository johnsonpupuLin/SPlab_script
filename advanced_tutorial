

＊使用 vim 記事本

vim 記事本的使用方法較為複雜，但為了要修改 script 的內容是一定得學會的工具。
基本用法即可，在這邊我會寫下一點點用法，但是請自行上網多看一些 vim 的教學。
首先記得，在 vim 裡面不能使用鍵盤右側的九宮格數字鍵，要打數字只能使用英文字母上方的那一排數字鍵。
連按都不要按！因為它們會輸入一些我現在也還不太懂做甚麼用的字串，可能會導致亂碼等等。

－開啟記事本 (會進入另一個頁面)
vim <想要命名的記事本檔案名稱>

－進入輸入模式 (下方顯示 -- insert --)
i
說明: 沒錯就是按一下 i。不分大小寫。在 vim 中須切換到輸入模式才能輸入文字。

－回到閱讀模式 (下方 -- inset -- 消失)
按左上角 Esc
說明: 除了輸入文字以外的所有動作，都得在閱讀模式中才能進行，例如存檔、搜尋、跳出筆記本等等。

－儲存檔案
:w
:w! → 加上 ! 可以強行儲存。
說明: 只要在閱讀模式按「:」，你會發現綠色游標跳到下面並多出一個「:」，就是可以進行動作的時候了。

－跳出記事本
:q
:q! → 加上 ! 可以強行跳出。

以上只是最基本的用法，vim 當然還包括搜尋、取代等等功能。請再參閱各式 vim 教學。




＊萬用字元與跳脫字元

Linux 的用法當中有許多不同的字元有特殊的意義。

萬用字元「*」能代表替換為所有字元。
例如，現在有三個檔案 abc.txt, bbc.txt, abd.txt。
想要用 head 一次查看三個檔案當然可以這樣輸入:

head abc.txt bbc.txt abd.txt

但若現在有萬用字元「*」存在，可以直接簡寫為以下:

head *.txt

可以直接代表為，以 .txt 結尾的所有檔案。
同樣的，如果想要查看 abc.txt, abd.txt 兩個檔案的話，可以輸入如下:

head ab*

可以直接代表為，以 ab 開頭的所有檔案。

萬用字元「*」只是其中一個特殊字元，有興趣可以上網自行查看其他的特殊字元。
也因此在輸入指令的時候，這些字元會被辨認為特別的意義。
如果仍然想要單純使用「*」這個字，就需要加上跳脫字元「\」。
分別輸入下面兩行指令就能看出差別:

echo *  → 會列出當下資料夾所有檔案的名稱。
echo \* → 只會出現一個 「*」




＊pipe (|) 的概念與儲存檔案的方式

在 Linux 中，多個指令是可以全部打在同一行中接續執行的。這個時候就需要用到 pipe (|) 的符號。
例如說，想要先列出 text.txt 這個檔案中前十行的內容，再搜尋含有 "aaa" 內容的行，可以輸入如下:

head text.txt | grep 'aaa' -

後段指令中的「-」代表標準輸出 (standard output, STDOUT)，即前段指令處理後的結果。
其實在大部分 pipe 的過程中，不打「-」程式也能順利辨認，不過打上會比較不容易搞混。


在運行程式的過程中，大部分的程式會將結果 (STDOUT) 輸出成已經命名的檔案。
然而，仍然會有部份程式直接將結果 (STDOUT) 輸出在畫面上，在程式跑完的同時，所有的結果 data 也跑光了。
想要將結果存放起來的話，可以像以下方式輸入:

指令 > 檔案名稱

「>」會把 STDOUT 存在指定的檔名中。
舉例來說，如果想要將一段文字「Testing」存成一個名為「test.txt」，可以像下面這樣輸入:

echo "Testing" > test.txt

需要注意的是，如果用的是「>」會將已經存在的檔案附蓋掉，但如果是輸入「>>」則會把新的內容加到已經存在的檔案內。
先不要刪除上面的 test.txt，可以試著比較輸入下面兩行指令後內容的差別:

echo "TESTINGTESTING" > test.txt
echo "TESTINGTESTING" >> test.txt

另外，除了「>」與「>>」外，還有「2>」可以使用。
「2>」的意義為，將程式發生錯誤的結果 (stardard error, STDERR) 存成一個檔案。





